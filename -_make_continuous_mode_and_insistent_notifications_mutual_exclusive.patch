Index: app/src/main/java/com/apps/adrcotfas/goodtime/BL/RingtoneAndVibrationPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/apps/adrcotfas/goodtime/BL/RingtoneAndVibrationPlayer.java	(revision 31e23681c1a8a94439ce7bdbb5651e2aa77a6a9d)
+++ app/src/main/java/com/apps/adrcotfas/goodtime/BL/RingtoneAndVibrationPlayer.java	(revision d8aa6509c2cf47606429fc3deaa108de7b9f76a4)
@@ -36,6 +36,9 @@
             mMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                 @Override
                 public void onPrepared(MediaPlayer mp) {
+                    // TODO: check duration of custom ringtones which may be much longer than notification sounds.
+                    // If it's n seconds long and we're in continuous mode,
+                    // schedule a stop after x seconds.
                     mMediaPlayer.start();
                 }
             });
Index: app/src/main/java/com/apps/adrcotfas/goodtime/Settings/SettingsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/apps/adrcotfas/goodtime/Settings/SettingsFragment.java	(revision 31e23681c1a8a94439ce7bdbb5651e2aa77a6a9d)
+++ app/src/main/java/com/apps/adrcotfas/goodtime/Settings/SettingsFragment.java	(revision d8aa6509c2cf47606429fc3deaa108de7b9f76a4)
@@ -102,6 +102,29 @@
                 return true;
             }
         });
+
+        // Continuous mode versus insistent notification
+        findPreference(PreferenceHelper.ENABLE_CONTINUOUS_MODE).setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+            @Override
+            public boolean onPreferenceChange(Preference preference, Object newValue) {
+                final CheckBoxPreference pref = (CheckBoxPreference) findPreference(PreferenceHelper.INSISTENT_RINGTONE);
+                if (pref.isChecked()) {
+                    pref.setChecked(false);
+                }
+                return true;
+            }
+        });
+
+        findPreference(PreferenceHelper.INSISTENT_RINGTONE).setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+            @Override
+            public boolean onPreferenceChange(Preference preference, Object newValue) {
+                final CheckBoxPreference pref = (CheckBoxPreference) findPreference(PreferenceHelper.ENABLE_CONTINUOUS_MODE);
+                if (pref.isChecked()) {
+                    pref.setChecked(false);
+                }
+                return true;
+            }
+        });
     }
 
     @Override
